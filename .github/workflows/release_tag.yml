---
name: Create Release Tag

on:
  push:
    branches:
      - 'release/v*'  # Matches branches like releases/v1, releases/v2, etc.

jobs:
  create-release-tag:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to fetch all history for tags

    - name: Get branch name
      id: branch-name
      run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Extract base version from branch
      id: version
      run: |
        # Extract version from branch name (e.g., releases/v1.0 -> 1.0)
        BASE_VERSION=$(echo "${{ steps.branch-name.outputs.branch_name }}" | sed -n 's/^releases\/v\([0-9]\+\.[0-9]\+\)$/\1/p')
        
        # Get the highest existing tag for this base version
        HIGHEST_TAG=$(git tag -l "release/v${BASE_VERSION}.*" --sort=-v:refname | head -n 1)
        
        if [ -z "$HIGHEST_TAG" ]; then
          # No existing tag for this version, start with .0
          NEW_VERSION="${BASE_VERSION}.0"
        else
          # Extract the patch number and increment
          PATCH_VERSION=$(echo "$HIGHEST_TAG" | sed -n 's/^release\/v[0-9]\+\.[0-9]\+\.\([0-9]\+\)$/\1/p')
          NEW_PATCH=$((PATCH_VERSION + 1))
          NEW_VERSION="${BASE_VERSION}.${NEW_PATCH}"
        fi
        
        echo "New version: v$NEW_VERSION"
        echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag -a "release/${{ steps.version.outputs.new_version }}" -m "Release ${{ steps.version.outputs.new_version }}"
        git push origin "release/${{ steps.version.outputs.new_version }}"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release/${{ steps.version.outputs.new_version }}
        release_name: Release ${{ steps.version.outputs.new_version }}
        draft: false
        prerelease: false
...
